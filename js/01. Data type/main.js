'use strict';
// Операторы используются для объединения
// нескольких выражений (простых и сложных), 
// которые называются операндами (операнд это выражение над которым проводятся операции)

// Унарный оператор операция 
// прозводится над одним операндом
// Бинарный оператор операция 
// прозводится над двумя операндами
// Тернарный оператор операция 
// прозводится над тремя операндами

// 5 примитивных типов
let num = 5,
    str = 'Hello world!',
    bool = true,
    myNull = null, // пока переменная пуста
    myUndefined = undefined; // значение не присвоено

// 6 тип ссылочные типы
let arr = [], obj = [], fnc = function () { };

// Примечания. Это являются ошибками языка
console.log(typeof null); // object
console.log(typeof fnc); // function


// undefined и null
let temp;
console.log(temp); // undefined
console.log(arr[5]); // undefined
console.log(obj.zzz); // undefined
console.log(fnc()); // undefined

// все операции(арифметические, присваивание и другие)
// выполняются по приоритетам
// + -- сложение чисел кроме строк, если один операнд является строкой то происходит конкатенация
// - -- вычитание
// * -- умножение
// / -- деление с остатком
// % -- получение остатка
let exp = [1, "2", true, false, null, undefined, {}, { ar: 5 }, [], [5], [[5]]];

for (let i = 0; i < exp.length; ++i) {
    for (let k = 0; k < exp.length; ++k) {
        console.log(`${typeof exp[i]} + ${typeof exp[k]}: ${ exp[i] + exp[k]}`);
    }
}
